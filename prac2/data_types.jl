### A Pluto.jl notebook ###
# v0.20.4

using Markdown
using InteractiveUtils

# ╔═╡ 5c0f4808-dadf-11ef-0f47-2d5a60894d43
md"""
# Строки
Строки в Julia обозначаются двойными кавычками " 
"""

# ╔═╡ a3983230-87a3-4862-b80f-f48cfbf39789
s2 = """ 
Многострочная строка обозначается тройными кавычками
"""

# ╔═╡ c11709a6-39b8-4b5c-85a2-63b829ec5175
md"""
Экранирование одинарных кавычек не требуется, если использовать их внутри многострочной строки
"""

# ╔═╡ 232e56f7-730a-4211-8c64-fe2430b9e91e
md"""
Строчные символы также представлены в Juliaб, они создаются при помощи одинарных кавычек '
"""

# ╔═╡ 1663a53c-3e4e-4394-8354-d041de4ea9f9
typeof('a')

# ╔═╡ 1fded6b2-5950-44d1-bfb1-d3799298dafb
#'Если попробовать создать символьную строку, то будет сгенерирована ошибка'

# ╔═╡ 92ed6ffa-97b8-45a2-81b7-4385fc884d1b
md"""
## Интерполяция строк

Интерполяция -- это замена части строки динамически вычисляемым содержимым. В Julia интерполяция производится путем обозначения внутри строки специальной конструкции
```julia
$()
```
"""

# ╔═╡ 9fa9b3bf-2ea4-4d1d-b1e3-2b8e7606c826
documents = ["усы", "лапы", "хвост"]

# ╔═╡ 067236d5-16fd-4485-ba52-f780700e0b70
println("Мои документы: $(documents)")

# ╔═╡ 66f5f221-9d9c-45c5-a923-34942a38146a
"А еще у меня $(2 + 2) ноги"

# ╔═╡ 5ea3cd44-35ae-44c7-8aa8-190c92a2bb9d
md"""
Конкатенация строк
Конкатенация -- операция обьединения. В Julia есть несколько способов применения конкатенации к строкам
"""

# ╔═╡ 71dc18da-8565-41bf-bf94-0ac236bd4bd4
string("обьединение", "строк", "через", "функцию", "string")

# ╔═╡ e1ea9455-f7c1-4bc6-905b-e2b16bbe3bed
begin
	s3 = "Обьединение строк"
	s4 = " Через перегруженный оператор *"
	s3 * s4
end

# ╔═╡ 8646b8eb-e16e-4e2f-a7b6-76da699e2aff
md"""
# Структуры данных
В Julia представлены несколько базовых структур данных, на основе которых можно создавать более комплексные структуры, со сложным поведением. 
Базовые структуры данных:
- Кортежи
- Словари (ассоциативные массивы)
- Массивы
"""

# ╔═╡ 43592562-5092-4cf4-861c-9f6a053c5c6b
md"""
## Кортежи
Кортеж -- упорядоченная коллекция элементов, которая может содержать значения разных типов. Кортежи задаются перечнем содержимого обрамленного ()
"""

# ╔═╡ 48f9020f-40a8-475f-9145-694324c96e2c
example_tuple = ("string", 42)

# ╔═╡ 49b79695-6861-448d-b7db-7f6f89326005
md"""
Доступ к содержимому кортежа производится по индексу

(В Julia индексация начинается с 1)
"""

# ╔═╡ debe8314-44a4-47c2-8965-683d182f9411
example_tuple[1]

# ╔═╡ 7e86b531-9c5a-4dcb-95b9-2e5ddcd4f7e2
md"""
Кортежи иммутабельны (неизменяемы), поэтому после инициализации содержимое кортежа нельзя изменить
"""

# ╔═╡ f7ade809-c4ca-4f54-9f4a-ddd1db31d842
example_tuple[1] = "другое значение"

# ╔═╡ 361daa65-ad82-416c-b2dc-f2607b53bb3c
md"""
## Именованные кортежи
Именованные кортежи, это расширенный вариант кортежей, индексация которых производится по задаваемому индексу. 
Именованный кортеж задется следующим образом:
```julia
(name1 = item1, name2 = item2, ...)
```
"""

# ╔═╡ 75708087-59ad-48c0-9e97-0360889dd1e1
example_named = (bird = "пингвин", pet = "кошка")

# ╔═╡ 25c7e22f-e97c-4ccc-93bd-345331dba3de
typeof(example_named)

# ╔═╡ d84a731d-dab1-46eb-891b-d71d43dee793
md"""
Доступ к содержимому именованного кортежа осуществляется как по его индексу, так и по его ключу, через атрибут
"""

# ╔═╡ 61fa62b2-939f-4db6-9e87-be30d18d79cc
example_named[1]

# ╔═╡ a112aab2-a8e3-4ddd-8b3b-8854888fdce3
example_named.pet

# ╔═╡ a661a095-a742-4808-8d8c-dd0483bea77e
md"""
## Словари

Ассоциативные массивы -- структуры данных "ключ-значение". 

Словарь может быть создан пустым через функцию создания словаря `Dict()`. 
Для инициализаци непустого словаря, используется следующий синтаксис:
```julia
Dict(key1 => value1)
```
"""

# ╔═╡ 47230944-fc9e-4176-ae17-c108842323d1
phonebook = Dict("Барсик" => "333-311", "Вилсон" => "121-212")

# ╔═╡ 287a8021-83f1-42c9-b770-8fcbcf7b19d1
md"""
Доступ к значениям осуществляется по ключу
"""

# ╔═╡ 2a29ae8e-08d9-43f2-8eee-19ddd87e889e
phonebook["Барсик"]

# ╔═╡ 020b877b-014f-4abc-8871-3d6588d59efc
md"""
Словари это мутабельные (изменяемые) структуры, возможно как изменение значение, так и изменение наличия ключа.

Изменение значения производится через присвоение по ключу. 

Удаление из словаря осуществляется вызовом фукций `pop!()` или `delete!()`
"""

# ╔═╡ d7e97c44-0126-493d-af35-944f2211b6e1
pop!(phonebook, "Барсик")

# ╔═╡ 05307320-e2a2-4538-8119-f2848aa71e3c
phonebook

# ╔═╡ 7751e28e-c8c5-4737-b69b-e2c5073b647b
phonebook["Вилсон"] = "333-311"

# ╔═╡ a16b2661-4335-4ed7-a917-a789b9915fc1
md"""
Проверить наличие ключа можно при помощи функции `haskey()`
"""

# ╔═╡ 934db96d-53a1-4021-8d38-00526607787a
haskey(phonebook, "Барсик")

# ╔═╡ 705ed1ad-36ea-430b-8c54-508be5fa9a9c
md"""
## Массивы

Массивы - упорядоченные в памяти наборы значений одного типа. 

Массивы задаются следующим синтаксисом:
```julia
[item1, item2, ...]
```
"""

# ╔═╡ fbb0d54b-39e1-4b2b-ace0-433e91490158
documents

# ╔═╡ 01c5a748-c686-47a5-a5ab-4d317082d23f
md"""
Доступ к элементам массива осуществляется по их индексу.

Для того что бы удалить элемент из массива используется функция `pop!()`. Для того чтобы вставить элемент в существующий массив используется функция `push!()`

Массивы могут быть многомерными, то есть вложенными. 
"""

# ╔═╡ 4885b84d-af4f-4880-a856-23edc46fa7bb
numbers = [
	[1, 2, 3],
	[4, 5, 6],
	[7, 8, 9]
]

# ╔═╡ c913933c-996a-4440-ae41-94552b1557ae
numbers[1][2]

# ╔═╡ 4d5d0cda-737e-4a95-87b7-dcb9a02a3d69
md"""
Массивы, обычно, передаются по ссылке, поэтому присвоение нового имени не копирует массив, а создает ссылку на уже существующий. 
"""

# ╔═╡ 94461a2f-a677-4cc4-94b6-538c4a5eecc3
mimic_numbers = numbers

# ╔═╡ 529ea11a-6728-40d2-88d5-f4599f6e6076
mimic_numbers[1][1] = 10

# ╔═╡ daa9f753-0a16-4361-a77e-10d0c876e874
mimic_numbers

# ╔═╡ 05742136-eb40-4522-929c-b22b1c4ca2c5
numbers

# ╔═╡ f9c2e21e-d0d9-4b19-ad07-d3ec4e9ebded
md"""
# Задания
## Задание 1
Вызовите справку по функции `repeat`.
## Задание 2
Создайте строку содержащую "Привет" тысячу раз.
## Задание 3
Вызовите справку по функции `rand`
## Задание 4
Создайте трехмерный массив случайных чисел размером `42x42`
## Задание 5
Создайте массив из семи чисел от 1 до 7. Замените все четные числа в массиве на 0 одной операцией. (Вам пригодится документация по срезам [supported index types](https://docs.julialang.org/en/v1/manual/arrays/#man-supported-index-types)
## Задание 6
Создайте два словаря
`Dict("a" => 1, "b" => 2)` 
`Dict("c" => 3, "d" => 4)`

Обьедените их в один словарь. (Вам пригодится документация по функции `merge()`)
## Задание 7
Создайте кортеж `(10, "Julia", 3.14)`

Выведите последний элемент кортежа. (Вам пригодится документация по срезам [supported index types](https://docs.julialang.org/en/v1/manual/arrays/#man-supported-index-types)
"""

# ╔═╡ bf982d6d-7731-4858-b820-d8bdefef780c
#=╠═╡
s1 = """ Test string with " """
  ╠═╡ =#

# ╔═╡ 4d8ee69f-40c0-4e12-bd94-715efa423eee
# ╠═╡ disabled = true
#=╠═╡
s1 = "Test string"
  ╠═╡ =#

# ╔═╡ Cell order:
# ╠═5c0f4808-dadf-11ef-0f47-2d5a60894d43
# ╠═4d8ee69f-40c0-4e12-bd94-715efa423eee
# ╠═a3983230-87a3-4862-b80f-f48cfbf39789
# ╠═c11709a6-39b8-4b5c-85a2-63b829ec5175
# ╠═bf982d6d-7731-4858-b820-d8bdefef780c
# ╠═232e56f7-730a-4211-8c64-fe2430b9e91e
# ╠═1663a53c-3e4e-4394-8354-d041de4ea9f9
# ╠═1fded6b2-5950-44d1-bfb1-d3799298dafb
# ╠═92ed6ffa-97b8-45a2-81b7-4385fc884d1b
# ╠═9fa9b3bf-2ea4-4d1d-b1e3-2b8e7606c826
# ╠═067236d5-16fd-4485-ba52-f780700e0b70
# ╠═66f5f221-9d9c-45c5-a923-34942a38146a
# ╠═5ea3cd44-35ae-44c7-8aa8-190c92a2bb9d
# ╠═71dc18da-8565-41bf-bf94-0ac236bd4bd4
# ╠═e1ea9455-f7c1-4bc6-905b-e2b16bbe3bed
# ╠═8646b8eb-e16e-4e2f-a7b6-76da699e2aff
# ╠═43592562-5092-4cf4-861c-9f6a053c5c6b
# ╠═48f9020f-40a8-475f-9145-694324c96e2c
# ╠═49b79695-6861-448d-b7db-7f6f89326005
# ╠═debe8314-44a4-47c2-8965-683d182f9411
# ╠═7e86b531-9c5a-4dcb-95b9-2e5ddcd4f7e2
# ╠═f7ade809-c4ca-4f54-9f4a-ddd1db31d842
# ╠═361daa65-ad82-416c-b2dc-f2607b53bb3c
# ╠═75708087-59ad-48c0-9e97-0360889dd1e1
# ╠═25c7e22f-e97c-4ccc-93bd-345331dba3de
# ╠═d84a731d-dab1-46eb-891b-d71d43dee793
# ╠═61fa62b2-939f-4db6-9e87-be30d18d79cc
# ╠═a112aab2-a8e3-4ddd-8b3b-8854888fdce3
# ╠═a661a095-a742-4808-8d8c-dd0483bea77e
# ╠═47230944-fc9e-4176-ae17-c108842323d1
# ╠═287a8021-83f1-42c9-b770-8fcbcf7b19d1
# ╠═2a29ae8e-08d9-43f2-8eee-19ddd87e889e
# ╠═020b877b-014f-4abc-8871-3d6588d59efc
# ╠═d7e97c44-0126-493d-af35-944f2211b6e1
# ╠═05307320-e2a2-4538-8119-f2848aa71e3c
# ╠═7751e28e-c8c5-4737-b69b-e2c5073b647b
# ╠═a16b2661-4335-4ed7-a917-a789b9915fc1
# ╠═934db96d-53a1-4021-8d38-00526607787a
# ╠═705ed1ad-36ea-430b-8c54-508be5fa9a9c
# ╠═fbb0d54b-39e1-4b2b-ace0-433e91490158
# ╠═01c5a748-c686-47a5-a5ab-4d317082d23f
# ╠═4885b84d-af4f-4880-a856-23edc46fa7bb
# ╠═c913933c-996a-4440-ae41-94552b1557ae
# ╠═4d5d0cda-737e-4a95-87b7-dcb9a02a3d69
# ╠═94461a2f-a677-4cc4-94b6-538c4a5eecc3
# ╠═529ea11a-6728-40d2-88d5-f4599f6e6076
# ╠═daa9f753-0a16-4361-a77e-10d0c876e874
# ╠═05742136-eb40-4522-929c-b22b1c4ca2c5
# ╠═f9c2e21e-d0d9-4b19-ad07-d3ec4e9ebded
