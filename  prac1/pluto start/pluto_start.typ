#set text(lang: "ru")
#set text(
    font: "Times New Roman",
    size: 14pt,
  )

#set page(
    paper: "a4",
    // The margins depend on the paper size.
    margin:
      (left: 1.5cm, top: 2.5cm, bottom: 1cm, right: 2cm),
    numbering: "1",
    header: [
        #set text(8pt)
        #smallcaps[Современные языки программирования для анализа данных]
        #h(1fr) Практическая работа
    ]
  )


#set par( 
    // first-line-indent: 1cm,
    justify: true,
    // leading: 1em 
)

#set enum(indent: 10pt, body-indent: 9pt)
#set list(indent: 10pt, body-indent: 9pt)

// #import "./drafting.typ": *

#import "@preview/gentle-clues:0.5.0": clue

#import "@preview/wrap-it:0.1.0": wrap-content



= Установка и запуск интерактивной среды Pluto

== Установка пакета в систему
Julia поставляется в комплекте с менеджером зависимостей Pkg. 
Его можно использовать, как подключаемую библитеку, внутри программ, так и в интерактивном режиме во время сессии интерпретатора. Для быстрой установки, мы воспользуемся интерактивной сессией интерпретатора. 

Для этого в терминале вашей системы, запустите интерпретатор:

```shell
$ julia
               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.11.3 (2025-01-21)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |  
julia>     
```

`julia>` -- это строка ввода команд в режиме интерпретации. Сейчас можно произвести вычисления и результат будет отображен тут же, в терминале 

```shell
julia> 2 + 2
4
julia>
```

Для выхода из режима интерпретации используется комбинация клавиш `Ctrl + D`. Для перехода в режим управления зависимости, необходимо, находясь в сессии интерпретатора нажать клавишу `]`. Тогда строка команд изменится, показывая, что мы вошли в режим управления зависимостями: 

```shell 
(@v1.11) pkg> 
```

Для установки интерактивной среды, добавим зависимость в систему: 
```shell 
(@v1.11) pkg> add Pluto
```
После выполнения этой команды нужно будет подождать, пока Pkg установит и скомпилирует зависимости Pluto. Время исполнения зависит от мощности вашей системы. 

После установки пакета, проверим зависимости:

```shell  
(@v1.11) pkg> status 
Status `~/.julia/environments/v1.11/Project.toml`
  [336ed68f] CSV v0.10.15
  [a93c6f00] DataFrames v1.7.0
  [2b0e0bc5] LanguageServer v4.5.1
  [7eb4fadd] Match v2.4.0
  [91a5bcdd] Plots v1.40.9
  [c3e4b0f8] Pluto v0.20.4
  [438e738f] PyCall v1.96.4
  [d330b81b] PyPlot v2.11.5
  [bd07be1c] Winston v1.0.1

```
В списке перекомпилированных пакетов можно увидеть Pluto, это значит, что установка прошла успешно. 

=== Запуск тестовой тетради

Для создания интерактивной среды нужно войти в сессию интерпретатора и ввести следующие команды:
```shell
julia> using Pluto
julia> Pluto.run()
[ Info: Loading...
┌ Info: 
└ Opening http://localhost:1234/?secret=4Jy2hWHB in your default browser... ~ have fun!
┌ Info: 
│ Press Ctrl+C in this terminal to stop Pluto
└ 
```
После этого в вашем браузере откроется главная страница интерактивной среды

В главном меню отображаются необходимые функции: создание новой тетради, открытие существующей, запуск обучающих тетрадей.
Концептуально, интерактивные тетради Pluto схожи с Jupyter Notebook. Это интерактивная среда состоящая из ячеек, которые могут представлять собой как исполняемый код, так и текст. 
Исполнение исходного кода интерактивно, выводы отображаются сразу же под ячейками. 
#figure(caption: [Главное меню Pluto])[
  #image("pluto_main.png", height: 50%)
]

Для ознакомления со структурой, создадим новую тетрадь. 


#let fig = figure(image("pluto_create.png"), caption: [Создание новой тетради])
#let fig2 = figure(image("pluto_notebook.png"), caption: [Создание новой тетради])

#wrap-content(fig, [Для ознакомления со структурой, создадим новую тетрадь. После этого откроется пустая тетрадь без созданных ячеек и даже без имени.])

#wrap-content(fig2, [
  - 1 -- поле ввода имени тетради, 
  - 2 -- ячейка для исходного кода или текста, 
  - 3 -- вывод ячейки
])


